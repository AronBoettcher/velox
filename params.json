{
  "name": "Velox",
  "tagline": "Fast raster manipulation and extraction in R.",
  "body": "# velox\r\n\r\nVelox is an R package for performing fast extraction and manipulation operations on geographic raster data. velox is fast because all raster computations are performed in C++ (using the excellent [Rcpp API](http://www.rcpp.org/)), and all data is held in memory. velox is intended to be used together with the [raster](https://cran.r-project.org/package=raster) package, to which it provides a straightforward interface.\r\n\r\nCurrently, the following operations are implemented in velox:\r\n+ Focal value calculation (i.e. moving window filters)\r\n+ Raster value extraction given polygons\r\n+ Rasterization of polygons\r\n+ Raster aggregation\r\n+ Cropping\r\n+ Image patch flattening (similar to Matlab's im2col) and reconstruction\r\n\r\n## Status\r\n[![Travis-CI Build Status](https://travis-ci.org/hunzikp/velox.svg?branch=master)](https://travis-ci.org/hunzikp/velox)\r\n\r\n## Installation\r\n\r\nVelox should work on all major operating systems (Linux, Mac OS, Windows).\r\n\r\n### Dependencies\r\n\r\nFor its read and write methods, velox requires the [rgdal](https://cran.r-project.org/package=rgdal) package, which relies on the external\r\nGDAL (>= 1.6.3) and PROJ.4 (>= 4.4.9) libraries. \r\nOn Debian/Ubuntu (>= 12.04), GDAL and PROJ.4 can be installbed by entering\r\n```shell\r\nsudo apt-get install libgdal-dev libproj-dev\r\n```\r\nin a terminal.\r\nFurther, velox depends on the [rgeos](https://cran.r-project.org/package=rgeos) package, which in turn requires the external GEOS library (>= 3.2.0).\r\nTo install GEOS on Debian/Ubuntu (>= 12.04), enter\r\n```shell\r\nsudo apt-get install libgeos-dev\r\n```\r\nin a terminal.\r\n\r\n### R Package\r\nOnce the system dependencies are available, you can either install velox from CRAN\r\n```R\r\ninstall.packages(\"velox\")\r\n```\r\nor you can install the development version using the `install_github` function from the [devtools](https://cran.r-project.org/package=devtools) package:\r\n```R\r\nlibrary(devtools)\r\ninstall_github(\"hunzikp/velox\")\r\n```\r\n\r\n\r\n## Benchmarking\r\n\r\nThe following performance tests were peformed on a i7-4810MQ CPU at 2.80GHz, using `raster` 2.5-8, PostgreSQL 9.5 and PostGIS 2.2.\r\nSee [here](https://raw.githubusercontent.com/hunzikp/velox/master/vignettes/benchmarking.R) for the underlying R script.\r\n\r\n![](https://raw.githubusercontent.com/hunzikp/velox/master/vignettes/benchmark.png \"velox benchmark\")\r\n\r\n\r\n## Getting Started\r\n\r\n### Creating `VeloxRaster` Objects\r\n\r\n`VeloxRaster` objects are created with the `velox` function:\r\n```R\r\nlibrary(velox)\r\nlibrary(raster)\r\n\r\n## From GDAL readable raster file\r\nvx1 <- velox(\"myraster.tif\")\r\n\r\n## From RasterLayer object\r\nrl <- raster(\"myraster.tif\")\r\nvx2 <- velox(rl)\r\n\r\n## From RasterStack object\r\nrs <- stack(\"myraster.tif\")\r\nvx3 <- velox(rs)\r\n\r\n## From matrix\r\nmat <- matrix(1:100, 10, 10)\r\nvx4 <- velox(mat, extent=c(0,1,0,1), res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\n\r\n## From list of matrices\r\nmat.ls <- list(matrix(1:100, 10, 10), matrix(100:1, 10, 10))\r\nvx5 <- velox(mat.ls, extent=c(0,1,0,1), res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\n\r\n## From list of VeloxRasters\r\nvx.ls <- list(vx4, vx5)\r\nvx6 <- velox(vx.ls)\r\n```\r\n\r\n### Manipulating `VeloxRaster` Objects\r\n\r\n`VeloxRaster` objects are ReferenceClass objects and thus mutable:\r\n```R\r\n## Crop VeloxRaster\r\nmat <- matrix(1:100, 10, 10)\r\nvx <- velox(mat, extent=c(0,1,0,1), res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\ncropext <- c(0.3,0.7,0.3,0.7)\r\nvx$crop(cropext)\r\n\r\n> vx$extent\r\n[1] 0.3 0.7 0.3 0.7\r\n```\r\nWe can also aggregate a VeloxRaster...\r\n```R\r\n## Aggregate VeloxRaster\r\nmat <- matrix(1:100, 10, 10)\r\nvx <- velox(mat, extent=c(0,1,0,1), res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\nvx$aggregate(factor=c(2,2), aggtype=\"sum\")\r\n```\r\n... or calculate focal values (i.e. apply a moving window filter):\r\n```R\r\n## Apply filter to VeloxRaster\r\nmat <- matrix(1:100, 10, 10)\r\nvx <- velox(mat, extent=c(0,1,0,1), res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\nvx$medianFocal(wrow=3, wcol=3, bands=1)\r\n```\r\n\r\n### Extracting raster values given polygons\r\n\r\n```R\r\n## Make VeloxRaster\r\nmat <- matrix(1:100, 10, 10)\r\nextent <- c(0,1,0,1)\r\nvx <- velox(mat, extent=extent, res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\n\r\n## Make SpatialPolygonsDataFrame\r\nlibrary(sp)\r\nlibrary(rgeos)\r\nset.seed(0)\r\ncoords <- cbind(runif(10, extent[1], extent[2]), runif(10, extent[3], extent[4]))\r\nsp <- SpatialPoints(coords)\r\nspol <- gBuffer(sp, width=0.2, byid=TRUE)\r\nspdf <- SpatialPolygonsDataFrame(spol, data.frame(id=1:length(spol)), FALSE)\r\n\r\n## Extract values and calculate mean\r\nex.mat <- vx$extract(spdf, fun=mean)\r\n```\r\n\r\n### Rasterizing polygons\r\n\r\n```R\r\n## Make VeloxRaster\r\nmat <- matrix(0, 10, 10)\r\nextent <- c(0,1,0,1)\r\nvx <- velox(mat, extent=extent, res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\n\r\n## Make SpatialPolygonsDataFrame\r\nlibrary(sp)\r\nlibrary(rgeos)\r\nset.seed(0)\r\ncoords <- cbind(runif(10, extent[1], extent[2]), runif(10, extent[3], extent[4]))\r\nsp <- SpatialPoints(coords)\r\nspol <- gBuffer(sp, width=0.05, byid=TRUE)\r\nspdf <- SpatialPolygonsDataFrame(spol, data.frame(id=1:length(spol)), FALSE)\r\n\r\n## Rasterize polygons using \"id\" column\r\nvx$rasterize(spdf, field=\"id\", band=1)\r\n```\r\n\r\n### `raster` interface\r\n\r\n```R\r\n## Make VeloxRaster with two bands\r\nmat1 <- matrix(1, 10, 10)\r\nmat2 <- matrix(2, 10, 10)\r\nextent <- c(0,1,0,1)\r\nvx <- velox(list(mat1, mat2), extent=extent, res=c(0.1,0.1), crs=\"+proj=longlat +datum=WGS84 +no_defs\")\r\n\r\n## Cast band 1 as RasterLayer\r\nrl <- vx$as.RasterLayer(band=1)\r\n\r\n## Cast both bands as RasterStack\r\nrs <- vx$as.RasterStack()\r\n\r\n## Back to VeloxRaster\r\nvx2 <- velox(rs)\r\n```\r\n\r\n### Help\r\n\r\nBecause most of `velox`'s functionality comes in the form of `VeloxRaster` methods, accessing the help pages is performed as follows:\r\n\r\n```R\r\n## See all methods of VeloxRaster\r\n?VeloxRaster\r\n\r\n## See help for method 'extract'\r\n?VeloxRaster_extract\r\n\r\n## See help for method 'crop'\r\n?VeloxRaster_crop\r\n\r\n## etc...\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}